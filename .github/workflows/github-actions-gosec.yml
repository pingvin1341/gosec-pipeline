name: Run Gosec
on:
  push:
    branches: ["master", "main"]

jobs:
  semgrep:
    name: Semgrep scan
    runs-on: ubuntu-latest
    if: (github.actor != 'dependabot[bot]')
    steps:
      - uses: actions/checkout@v2
      - name: Setup SSH Keys and known_hosts
        env:
            SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
            ssh-agent -a $SSH_AUTH_SOCK > /dev/null
            ssh-add - <<< "${{ secrets.SSH_REPO_PRIVATE_KEY }}"
      - name: Checkout custom rules
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: git clone git@github.com:pingvin1341/custom-rulepack.git ../custom-rules/
      - name: Show dirs structure
        run: cd  ../ && ls -la
      - name: Run semgrep in docker
        run: cd ../ && docker run -v $(pwd):/src --workdir /src returntocorp/semgrep-agent:v1 semgrep --config custom-rules/ --include=gosec-pipeline --json gosec-pipeline/ > semgrep.json
      - name: view
        run: cat ../semgrep.json

  gosec:
    name: Gosec scan 
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec.sarif ./...'
      - name: view
        run: cat gosec.sarif
  #    - name: Upload file
   #     run: |
    #     curl -v -s --request POST ${{ secrets.REPORT_URL }} \
    #     -H "Content-Type: multipart/form-data" \
    #     -H "Authorization: Token ${{ secrets.API_REPORT_KEY }}" \
    #     -F "file=@gosec.sarif"

  analyze:
    name: Codeql scan
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: ['go']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - run: git checkout HEAD^2
      if: ${{ github.event_name == 'pull_request' }}

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

  gitleaks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    #- name: gitleaks-action
     # uses: zricethezav/gitleaks-action@master
     # id: gitleaks_run
    #- name: result
    #  run: echo ${{steps.gitleaks_run.outputs.result}}
    - name: gitleaks in docker
      run: docker run -v $(pwd):/src --workdir /src zricethezav/gitleaks:latest detect  --source="/src" --verbose --redact --exit-code 0 --report-format json > gitleaks.json
    - name: result
      run: cat gitleaks.json

  truflehog3:
    runs-on: ubuntu-latest      
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: trufflehog-actions-scan
      uses: pingvin1341/trufflehog-actions-scan@master
      with:
        scanArguments: "--no-history --format json /github/workspace --output result.json"
    - name: result  
      run: cat result.json


  devskim:
    runs-on: ubuntu-latest      
    steps:
    - uses: actions/checkout@v2
    - uses: microsoft/DevSkim-Action@v1
    - uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: devskim-results.sarif
    - name: result  
      run: cat  devskim-results.sarif
      
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: pre-commit/action@v2.0.3      

  detect-secrets:
    name: Scan detect-secrets 
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: detect-secrets in docker
      run: docker run -v $(pwd):/src --workdir /src  ibmcom/detect-secrets:latest  scan .  > detect-secrets.json
    - name: result
      run: cat detect-secrets.json


  owasp:
    name: Scan dependency 
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Scan dependency in docker
      run: docker run --rm --volume $(pwd):/src:z --volume $(pwd):/report:z owasp/dependency-check:latest  --scan /src  --format "ALL"  --project "dependency-check scan: $(pwd)"  --out /report
    - name: result
      run: ls -la
